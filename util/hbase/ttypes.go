// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

//Specify type of delete:
// - DELETE_COLUMN means exactly one version will be removed,
// - DELETE_COLUMNS means previous versions will also be removed.
type TDeleteType int64

const (
	TDeleteType_DELETE_COLUMN         TDeleteType = 0
	TDeleteType_DELETE_COLUMNS        TDeleteType = 1
	TDeleteType_DELETE_FAMILY         TDeleteType = 2
	TDeleteType_DELETE_FAMILY_VERSION TDeleteType = 3
)

func (p TDeleteType) String() string {
	switch p {
	case TDeleteType_DELETE_COLUMN:
		return "TDeleteType_DELETE_COLUMN"
	case TDeleteType_DELETE_COLUMNS:
		return "TDeleteType_DELETE_COLUMNS"
	case TDeleteType_DELETE_FAMILY:
		return "TDeleteType_DELETE_FAMILY"
	case TDeleteType_DELETE_FAMILY_VERSION:
		return "TDeleteType_DELETE_FAMILY_VERSION"
	}
	return "<UNSET>"
}

func TDeleteTypeFromString(s string) (TDeleteType, error) {
	switch s {
	case "TDeleteType_DELETE_COLUMN":
		return TDeleteType_DELETE_COLUMN, nil
	case "TDeleteType_DELETE_COLUMNS":
		return TDeleteType_DELETE_COLUMNS, nil
	case "TDeleteType_DELETE_FAMILY":
		return TDeleteType_DELETE_FAMILY, nil
	case "TDeleteType_DELETE_FAMILY_VERSION":
		return TDeleteType_DELETE_FAMILY_VERSION, nil
	}
	return TDeleteType(0), fmt.Errorf("not a valid TDeleteType string")
}

func TDeleteTypePtr(v TDeleteType) *TDeleteType { return &v }

//Specify Durability:
// - SKIP_WAL means do not write the Mutation to the WAL.
// - ASYNC_WAL means write the Mutation to the WAL asynchronously,
// - SYNC_WAL means write the Mutation to the WAL synchronously,
// - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
type TDurability int64

const (
	TDurability_USE_DEFAULT TDurability = 0
	TDurability_SKIP_WAL    TDurability = 1
	TDurability_ASYNC_WAL   TDurability = 2
	TDurability_SYNC_WAL    TDurability = 3
	TDurability_FSYNC_WAL   TDurability = 4
)

func (p TDurability) String() string {
	switch p {
	case TDurability_USE_DEFAULT:
		return "TDurability_USE_DEFAULT"
	case TDurability_SKIP_WAL:
		return "TDurability_SKIP_WAL"
	case TDurability_ASYNC_WAL:
		return "TDurability_ASYNC_WAL"
	case TDurability_SYNC_WAL:
		return "TDurability_SYNC_WAL"
	case TDurability_FSYNC_WAL:
		return "TDurability_FSYNC_WAL"
	}
	return "<UNSET>"
}

func TDurabilityFromString(s string) (TDurability, error) {
	switch s {
	case "TDurability_USE_DEFAULT":
		return TDurability_USE_DEFAULT, nil
	case "TDurability_SKIP_WAL":
		return TDurability_SKIP_WAL, nil
	case "TDurability_ASYNC_WAL":
		return TDurability_ASYNC_WAL, nil
	case "TDurability_SYNC_WAL":
		return TDurability_SYNC_WAL, nil
	case "TDurability_FSYNC_WAL":
		return TDurability_FSYNC_WAL, nil
	}
	return TDurability(0), fmt.Errorf("not a valid TDurability string")
}

func TDurabilityPtr(v TDurability) *TDurability { return &v }

//Specify Consistency:
// - STRONG means reads only from primary region
// - TIMELINE means reads might return values from secondary region replicas
type TConsistency int64

const (
	TConsistency_STRONG   TConsistency = 1
	TConsistency_TIMELINE TConsistency = 2
)

func (p TConsistency) String() string {
	switch p {
	case TConsistency_STRONG:
		return "TConsistency_STRONG"
	case TConsistency_TIMELINE:
		return "TConsistency_TIMELINE"
	}
	return "<UNSET>"
}

func TConsistencyFromString(s string) (TConsistency, error) {
	switch s {
	case "TConsistency_STRONG":
		return TConsistency_STRONG, nil
	case "TConsistency_TIMELINE":
		return TConsistency_TIMELINE, nil
	}
	return TConsistency(0), fmt.Errorf("not a valid TConsistency string")
}

func TConsistencyPtr(v TConsistency) *TConsistency { return &v }

type TReadType int64

const (
	TReadType_DEFAULT TReadType = 1
	TReadType_STREAM  TReadType = 2
	TReadType_PREAD   TReadType = 3
)

func (p TReadType) String() string {
	switch p {
	case TReadType_DEFAULT:
		return "TReadType_DEFAULT"
	case TReadType_STREAM:
		return "TReadType_STREAM"
	case TReadType_PREAD:
		return "TReadType_PREAD"
	}
	return "<UNSET>"
}

func TReadTypeFromString(s string) (TReadType, error) {
	switch s {
	case "TReadType_DEFAULT":
		return TReadType_DEFAULT, nil
	case "TReadType_STREAM":
		return TReadType_STREAM, nil
	case "TReadType_PREAD":
		return TReadType_PREAD, nil
	}
	return TReadType(0), fmt.Errorf("not a valid TReadType string")
}

func TReadTypePtr(v TReadType) *TReadType { return &v }

//Thrift wrapper around
//org.apache.hadoop.hbase.filter.CompareFilter$CompareOp.
type TCompareOp int64

const (
	TCompareOp_LESS             TCompareOp = 0
	TCompareOp_LESS_OR_EQUAL    TCompareOp = 1
	TCompareOp_EQUAL            TCompareOp = 2
	TCompareOp_NOT_EQUAL        TCompareOp = 3
	TCompareOp_GREATER_OR_EQUAL TCompareOp = 4
	TCompareOp_GREATER          TCompareOp = 5
	TCompareOp_NO_OP            TCompareOp = 6
)

func (p TCompareOp) String() string {
	switch p {
	case TCompareOp_LESS:
		return "TCompareOp_LESS"
	case TCompareOp_LESS_OR_EQUAL:
		return "TCompareOp_LESS_OR_EQUAL"
	case TCompareOp_EQUAL:
		return "TCompareOp_EQUAL"
	case TCompareOp_NOT_EQUAL:
		return "TCompareOp_NOT_EQUAL"
	case TCompareOp_GREATER_OR_EQUAL:
		return "TCompareOp_GREATER_OR_EQUAL"
	case TCompareOp_GREATER:
		return "TCompareOp_GREATER"
	case TCompareOp_NO_OP:
		return "TCompareOp_NO_OP"
	}
	return "<UNSET>"
}

func TCompareOpFromString(s string) (TCompareOp, error) {
	switch s {
	case "TCompareOp_LESS":
		return TCompareOp_LESS, nil
	case "TCompareOp_LESS_OR_EQUAL":
		return TCompareOp_LESS_OR_EQUAL, nil
	case "TCompareOp_EQUAL":
		return TCompareOp_EQUAL, nil
	case "TCompareOp_NOT_EQUAL":
		return TCompareOp_NOT_EQUAL, nil
	case "TCompareOp_GREATER_OR_EQUAL":
		return TCompareOp_GREATER_OR_EQUAL, nil
	case "TCompareOp_GREATER":
		return TCompareOp_GREATER, nil
	case "TCompareOp_NO_OP":
		return TCompareOp_NO_OP, nil
	}
	return TCompareOp(0), fmt.Errorf("not a valid TCompareOp string")
}

func TCompareOpPtr(v TCompareOp) *TCompareOp { return &v }

//Thrift wrapper around
//org.apache.hadoop.hbase.regionserver.BloomType
type TBloomFilterType int64

const (
	TBloomFilterType_NONE                   TBloomFilterType = 0
	TBloomFilterType_ROW                    TBloomFilterType = 1
	TBloomFilterType_ROWCOL                 TBloomFilterType = 2
	TBloomFilterType_ROWPREFIX_FIXED_LENGTH TBloomFilterType = 3
)

func (p TBloomFilterType) String() string {
	switch p {
	case TBloomFilterType_NONE:
		return "TBloomFilterType_NONE"
	case TBloomFilterType_ROW:
		return "TBloomFilterType_ROW"
	case TBloomFilterType_ROWCOL:
		return "TBloomFilterType_ROWCOL"
	case TBloomFilterType_ROWPREFIX_FIXED_LENGTH:
		return "TBloomFilterType_ROWPREFIX_FIXED_LENGTH"
	}
	return "<UNSET>"
}

func TBloomFilterTypeFromString(s string) (TBloomFilterType, error) {
	switch s {
	case "TBloomFilterType_NONE":
		return TBloomFilterType_NONE, nil
	case "TBloomFilterType_ROW":
		return TBloomFilterType_ROW, nil
	case "TBloomFilterType_ROWCOL":
		return TBloomFilterType_ROWCOL, nil
	case "TBloomFilterType_ROWPREFIX_FIXED_LENGTH":
		return TBloomFilterType_ROWPREFIX_FIXED_LENGTH, nil
	}
	return TBloomFilterType(0), fmt.Errorf("not a valid TBloomFilterType string")
}

func TBloomFilterTypePtr(v TBloomFilterType) *TBloomFilterType { return &v }

//Thrift wrapper around
//org.apache.hadoop.hbase.io.compress.Algorithm
type TCompressionAlgorithm int64

const (
	TCompressionAlgorithm_LZO    TCompressionAlgorithm = 0
	TCompressionAlgorithm_GZ     TCompressionAlgorithm = 1
	TCompressionAlgorithm_NONE   TCompressionAlgorithm = 2
	TCompressionAlgorithm_SNAPPY TCompressionAlgorithm = 3
	TCompressionAlgorithm_LZ4    TCompressionAlgorithm = 4
	TCompressionAlgorithm_BZIP2  TCompressionAlgorithm = 5
	TCompressionAlgorithm_ZSTD   TCompressionAlgorithm = 6
)

func (p TCompressionAlgorithm) String() string {
	switch p {
	case TCompressionAlgorithm_LZO:
		return "TCompressionAlgorithm_LZO"
	case TCompressionAlgorithm_GZ:
		return "TCompressionAlgorithm_GZ"
	case TCompressionAlgorithm_NONE:
		return "TCompressionAlgorithm_NONE"
	case TCompressionAlgorithm_SNAPPY:
		return "TCompressionAlgorithm_SNAPPY"
	case TCompressionAlgorithm_LZ4:
		return "TCompressionAlgorithm_LZ4"
	case TCompressionAlgorithm_BZIP2:
		return "TCompressionAlgorithm_BZIP2"
	case TCompressionAlgorithm_ZSTD:
		return "TCompressionAlgorithm_ZSTD"
	}
	return "<UNSET>"
}

func TCompressionAlgorithmFromString(s string) (TCompressionAlgorithm, error) {
	switch s {
	case "TCompressionAlgorithm_LZO":
		return TCompressionAlgorithm_LZO, nil
	case "TCompressionAlgorithm_GZ":
		return TCompressionAlgorithm_GZ, nil
	case "TCompressionAlgorithm_NONE":
		return TCompressionAlgorithm_NONE, nil
	case "TCompressionAlgorithm_SNAPPY":
		return TCompressionAlgorithm_SNAPPY, nil
	case "TCompressionAlgorithm_LZ4":
		return TCompressionAlgorithm_LZ4, nil
	case "TCompressionAlgorithm_BZIP2":
		return TCompressionAlgorithm_BZIP2, nil
	case "TCompressionAlgorithm_ZSTD":
		return TCompressionAlgorithm_ZSTD, nil
	}
	return TCompressionAlgorithm(0), fmt.Errorf("not a valid TCompressionAlgorithm string")
}

func TCompressionAlgorithmPtr(v TCompressionAlgorithm) *TCompressionAlgorithm { return &v }

//Thrift wrapper around
//org.apache.hadoop.hbase.io.encoding.DataBlockEncoding
type TDataBlockEncoding int64

const (
	TDataBlockEncoding_NONE         TDataBlockEncoding = 0
	TDataBlockEncoding_PREFIX       TDataBlockEncoding = 2
	TDataBlockEncoding_DIFF         TDataBlockEncoding = 3
	TDataBlockEncoding_FAST_DIFF    TDataBlockEncoding = 4
	TDataBlockEncoding_ROW_INDEX_V1 TDataBlockEncoding = 7
)

func (p TDataBlockEncoding) String() string {
	switch p {
	case TDataBlockEncoding_NONE:
		return "TDataBlockEncoding_NONE"
	case TDataBlockEncoding_PREFIX:
		return "TDataBlockEncoding_PREFIX"
	case TDataBlockEncoding_DIFF:
		return "TDataBlockEncoding_DIFF"
	case TDataBlockEncoding_FAST_DIFF:
		return "TDataBlockEncoding_FAST_DIFF"
	case TDataBlockEncoding_ROW_INDEX_V1:
		return "TDataBlockEncoding_ROW_INDEX_V1"
	}
	return "<UNSET>"
}

func TDataBlockEncodingFromString(s string) (TDataBlockEncoding, error) {
	switch s {
	case "TDataBlockEncoding_NONE":
		return TDataBlockEncoding_NONE, nil
	case "TDataBlockEncoding_PREFIX":
		return TDataBlockEncoding_PREFIX, nil
	case "TDataBlockEncoding_DIFF":
		return TDataBlockEncoding_DIFF, nil
	case "TDataBlockEncoding_FAST_DIFF":
		return TDataBlockEncoding_FAST_DIFF, nil
	case "TDataBlockEncoding_ROW_INDEX_V1":
		return TDataBlockEncoding_ROW_INDEX_V1, nil
	}
	return TDataBlockEncoding(0), fmt.Errorf("not a valid TDataBlockEncoding string")
}

func TDataBlockEncodingPtr(v TDataBlockEncoding) *TDataBlockEncoding { return &v }

//Thrift wrapper around
//org.apache.hadoop.hbase.KeepDeletedCells
type TKeepDeletedCells int64

const (
	TKeepDeletedCells_FALSE TKeepDeletedCells = 0
	TKeepDeletedCells_TRUE  TKeepDeletedCells = 1
	TKeepDeletedCells_TTL   TKeepDeletedCells = 2
)

func (p TKeepDeletedCells) String() string {
	switch p {
	case TKeepDeletedCells_FALSE:
		return "TKeepDeletedCells_FALSE"
	case TKeepDeletedCells_TRUE:
		return "TKeepDeletedCells_TRUE"
	case TKeepDeletedCells_TTL:
		return "TKeepDeletedCells_TTL"
	}
	return "<UNSET>"
}

func TKeepDeletedCellsFromString(s string) (TKeepDeletedCells, error) {
	switch s {
	case "TKeepDeletedCells_FALSE":
		return TKeepDeletedCells_FALSE, nil
	case "TKeepDeletedCells_TRUE":
		return TKeepDeletedCells_TRUE, nil
	case "TKeepDeletedCells_TTL":
		return TKeepDeletedCells_TTL, nil
	}
	return TKeepDeletedCells(0), fmt.Errorf("not a valid TKeepDeletedCells string")
}

func TKeepDeletedCellsPtr(v TKeepDeletedCells) *TKeepDeletedCells { return &v }

type TLogType int64

const (
	TLogType_SLOW_LOG  TLogType = 1
	TLogType_LARGE_LOG TLogType = 2
)

func (p TLogType) String() string {
	switch p {
	case TLogType_SLOW_LOG:
		return "TLogType_SLOW_LOG"
	case TLogType_LARGE_LOG:
		return "TLogType_LARGE_LOG"
	}
	return "<UNSET>"
}

func TLogTypeFromString(s string) (TLogType, error) {
	switch s {
	case "TLogType_SLOW_LOG":
		return TLogType_SLOW_LOG, nil
	case "TLogType_LARGE_LOG":
		return TLogType_LARGE_LOG, nil
	}
	return TLogType(0), fmt.Errorf("not a valid TLogType string")
}

func TLogTypePtr(v TLogType) *TLogType { return &v }

type TFilterByOperator int64

const (
	TFilterByOperator_AND TFilterByOperator = 0
	TFilterByOperator_OR  TFilterByOperator = 1
)

func (p TFilterByOperator) String() string {
	switch p {
	case TFilterByOperator_AND:
		return "TFilterByOperator_AND"
	case TFilterByOperator_OR:
		return "TFilterByOperator_OR"
	}
	return "<UNSET>"
}

func TFilterByOperatorFromString(s string) (TFilterByOperator, error) {
	switch s {
	case "TFilterByOperator_AND":
		return TFilterByOperator_AND, nil
	case "TFilterByOperator_OR":
		return TFilterByOperator_OR, nil
	}
	return TFilterByOperator(0), fmt.Errorf("not a valid TFilterByOperator string")
}

func TFilterByOperatorPtr(v TFilterByOperator) *TFilterByOperator { return &v }

//Specify type of thrift server: thrift and thrift2
type TThriftServerType int64

const (
	TThriftServerType_ONE TThriftServerType = 1
	TThriftServerType_TWO TThriftServerType = 2
)

func (p TThriftServerType) String() string {
	switch p {
	case TThriftServerType_ONE:
		return "TThriftServerType_ONE"
	case TThriftServerType_TWO:
		return "TThriftServerType_TWO"
	}
	return "<UNSET>"
}

func TThriftServerTypeFromString(s string) (TThriftServerType, error) {
	switch s {
	case "TThriftServerType_ONE":
		return TThriftServerType_ONE, nil
	case "TThriftServerType_TWO":
		return TThriftServerType_TWO, nil
	}
	return TThriftServerType(0), fmt.Errorf("not a valid TThriftServerType string")
}

func TThriftServerTypePtr(v TThriftServerType) *TThriftServerType { return &v }

type TTimeRange struct {
	MinStamp int64 `thrift:"minStamp,1,required" json:"minStamp"`
	MaxStamp int64 `thrift:"maxStamp,2,required" json:"maxStamp"`
}

func NewTTimeRange() *TTimeRange {
	return &TTimeRange{}
}

func (p *TTimeRange) GetMinStamp() int64 {
	return p.MinStamp
}

func (p *TTimeRange) GetMaxStamp() int64 {
	return p.MaxStamp
}
func (p *TTimeRange) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TTimeRange) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MinStamp = v
	}
	return nil
}

func (p *TTimeRange) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MaxStamp = v
	}
	return nil
}

func (p *TTimeRange) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTimeRange"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TTimeRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minStamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:minStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MinStamp)); err != nil {
		return fmt.Errorf("%T.minStamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:minStamp: %s", p, err)
	}
	return err
}

func (p *TTimeRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxStamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:maxStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MaxStamp)); err != nil {
		return fmt.Errorf("%T.maxStamp (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:maxStamp: %s", p, err)
	}
	return err
}

func (p *TTimeRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTimeRange(%+v)", *p)
}

type TColumn struct {
	Family    []byte `thrift:"family,1,required" json:"family"`
	Qualifier []byte `thrift:"qualifier,2" json:"qualifier"`
	Timestamp *int64 `thrift:"timestamp,3" json:"timestamp"`
}

func NewTColumn() *TColumn {
	return &TColumn{}
}

func (p *TColumn) GetFamily() []byte {
	return p.Family
}

var TColumn_Qualifier_DEFAULT []byte

func (p *TColumn) GetQualifier() []byte {
	return p.Qualifier
}

var TColumn_Timestamp_DEFAULT int64

func (p *TColumn) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TColumn_Timestamp_DEFAULT
	}
	return *p.Timestamp
}
func (p *TColumn) IsSetQualifier() bool {
	return p.Qualifier != nil
}

func (p *TColumn) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumn) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumn) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumn) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return fmt.Errorf("%T.family (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family: %s", p, err)
	}
	return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQualifier() {
		if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Qualifier); err != nil {
			return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)
}

type TColumnValue struct {
	Family    []byte `thrift:"family,1,required" json:"family"`
	Qualifier []byte `thrift:"qualifier,2,required" json:"qualifier"`
	Value     []byte `thrift:"value,3,required" json:"value"`
	Timestamp *int64 `thrift:"timestamp,4" json:"timestamp"`
	Tags      []byte `thrift:"tags,5" json:"tags"`
	TypeA1    *int8  `thrift:"type,6" json:"type"`
}

func NewTColumnValue() *TColumnValue {
	return &TColumnValue{}
}

func (p *TColumnValue) GetFamily() []byte {
	return p.Family
}

func (p *TColumnValue) GetQualifier() []byte {
	return p.Qualifier
}

func (p *TColumnValue) GetValue() []byte {
	return p.Value
}

var TColumnValue_Timestamp_DEFAULT int64

func (p *TColumnValue) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TColumnValue_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TColumnValue_Tags_DEFAULT []byte

func (p *TColumnValue) GetTags() []byte {
	return p.Tags
}

var TColumnValue_TypeA1_DEFAULT int8

func (p *TColumnValue) GetTypeA1() int8 {
	if !p.IsSetTypeA1() {
		return TColumnValue_TypeA1_DEFAULT
	}
	return *p.TypeA1
}
func (p *TColumnValue) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TColumnValue) IsSetTags() bool {
	return p.Tags != nil
}

func (p *TColumnValue) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *TColumnValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumnValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumnValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *TColumnValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TColumnValue) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Tags = v
	}
	return nil
}

func (p *TColumnValue) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.TypeA1 = &temp
	}
	return nil
}

func (p *TColumnValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnValue"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return fmt.Errorf("%T.family (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family: %s", p, err)
	}
	return err
}

func (p *TColumnValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Qualifier); err != nil {
		return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
	}
	return err
}

func (p *TColumnValue) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return fmt.Errorf("%T.value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:value: %s", p, err)
	}
	return err
}

func (p *TColumnValue) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:tags: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Tags); err != nil {
			return fmt.Errorf("%T.tags (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:tags: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.BYTE, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:type: %s", p, err)
		}
		if err := oprot.WriteByte(byte(*p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:type: %s", p, err)
		}
	}
	return err
}

func (p *TColumnValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnValue(%+v)", *p)
}

type TColumnIncrement struct {
	Family    []byte `thrift:"family,1,required" json:"family"`
	Qualifier []byte `thrift:"qualifier,2,required" json:"qualifier"`
	Amount    int64  `thrift:"amount,3" json:"amount"`
}

func NewTColumnIncrement() *TColumnIncrement {
	return &TColumnIncrement{
		Amount: 1,
	}
}

func (p *TColumnIncrement) GetFamily() []byte {
	return p.Family
}

func (p *TColumnIncrement) GetQualifier() []byte {
	return p.Qualifier
}

var TColumnIncrement_Amount_DEFAULT int64 = 1

func (p *TColumnIncrement) GetAmount() int64 {
	return p.Amount
}
func (p *TColumnIncrement) IsSetAmount() bool {
	return p.Amount != TColumnIncrement_Amount_DEFAULT
}

func (p *TColumnIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Family = v
	}
	return nil
}

func (p *TColumnIncrement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TColumnIncrement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *TColumnIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:family: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return fmt.Errorf("%T.family (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:family: %s", p, err)
	}
	return err
}

func (p *TColumnIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Qualifier); err != nil {
		return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
	}
	return err
}

func (p *TColumnIncrement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:amount: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Amount)); err != nil {
			return fmt.Errorf("%T.amount (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:amount: %s", p, err)
		}
	}
	return err
}

func (p *TColumnIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnIncrement(%+v)", *p)
}

type TResult_ struct {
	Row          []byte          `thrift:"row,1" json:"row"`
	ColumnValues []*TColumnValue `thrift:"columnValues,2,required" json:"columnValues"`
	Stale        bool            `thrift:"stale,3" json:"stale"`
	Partial      bool            `thrift:"partial,4" json:"partial"`
}

func NewTResult_() *TResult_ {
	return &TResult_{}
}

var TResult__Row_DEFAULT []byte

func (p *TResult_) GetRow() []byte {
	return p.Row
}

func (p *TResult_) GetColumnValues() []*TColumnValue {
	return p.ColumnValues
}

var TResult__Stale_DEFAULT bool = false

func (p *TResult_) GetStale() bool {
	return p.Stale
}

var TResult__Partial_DEFAULT bool = false

func (p *TResult_) GetPartial() bool {
	return p.Partial
}
func (p *TResult_) IsSetRow() bool {
	return p.Row != nil
}

func (p *TResult_) IsSetStale() bool {
	return p.Stale != TResult__Stale_DEFAULT
}

func (p *TResult_) IsSetPartial() bool {
	return p.Partial != TResult__Partial_DEFAULT
}

func (p *TResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.ColumnValues = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TColumnValue{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.ColumnValues = append(p.ColumnValues, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Stale = v
	}
	return nil
}

func (p *TResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Partial = v
	}
	return nil
}

func (p *TResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRow() {
		if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnValues: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ColumnValues {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnValues: %s", p, err)
	}
	return err
}

func (p *TResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStale() {
		if err := oprot.WriteFieldBegin("stale", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:stale: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Stale)); err != nil {
			return fmt.Errorf("%T.stale (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:stale: %s", p, err)
		}
	}
	return err
}

func (p *TResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartial() {
		if err := oprot.WriteFieldBegin("partial", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:partial: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Partial)); err != nil {
			return fmt.Errorf("%T.partial (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:partial: %s", p, err)
		}
	}
	return err
}

func (p *TResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResult_(%+v)", *p)
}

type TAuthorization struct {
	Labels []string `thrift:"labels,1" json:"labels"`
}

func NewTAuthorization() *TAuthorization {
	return &TAuthorization{}
}

var TAuthorization_Labels_DEFAULT []string

func (p *TAuthorization) GetLabels() []string {
	return p.Labels
}
func (p *TAuthorization) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *TAuthorization) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TAuthorization) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Labels = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.Labels = append(p.Labels, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TAuthorization) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAuthorization"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TAuthorization) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err := oprot.WriteFieldBegin("labels", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:labels: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Labels {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:labels: %s", p, err)
		}
	}
	return err
}

func (p *TAuthorization) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAuthorization(%+v)", *p)
}

type TCellVisibility struct {
	Expression *string `thrift:"expression,1" json:"expression"`
}

func NewTCellVisibility() *TCellVisibility {
	return &TCellVisibility{}
}

var TCellVisibility_Expression_DEFAULT string

func (p *TCellVisibility) GetExpression() string {
	if !p.IsSetExpression() {
		return TCellVisibility_Expression_DEFAULT
	}
	return *p.Expression
}
func (p *TCellVisibility) IsSetExpression() bool {
	return p.Expression != nil
}

func (p *TCellVisibility) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TCellVisibility) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Expression = &v
	}
	return nil
}

func (p *TCellVisibility) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCellVisibility"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TCellVisibility) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpression() {
		if err := oprot.WriteFieldBegin("expression", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:expression: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Expression)); err != nil {
			return fmt.Errorf("%T.expression (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:expression: %s", p, err)
		}
	}
	return err
}

func (p *TCellVisibility) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCellVisibility(%+v)", *p)
}

type TGet struct {
	Row             []byte            `thrift:"row,1,required" json:"row"`
	Columns         []*TColumn        `thrift:"columns,2" json:"columns"`
	Timestamp       *int64            `thrift:"timestamp,3" json:"timestamp"`
	TimeRange       *TTimeRange       `thrift:"timeRange,4" json:"timeRange"`
	MaxVersions     *int32            `thrift:"maxVersions,5" json:"maxVersions"`
	FilterString    []byte            `thrift:"filterString,6" json:"filterString"`
	Attributes      map[string][]byte `thrift:"attributes,7" json:"attributes"`
	Authorizations  *TAuthorization   `thrift:"authorizations,8" json:"authorizations"`
	Consistency     *TConsistency     `thrift:"consistency,9" json:"consistency"`
	TargetReplicaId *int32            `thrift:"targetReplicaId,10" json:"targetReplicaId"`
	CacheBlocks     *bool             `thrift:"cacheBlocks,11" json:"cacheBlocks"`
	StoreLimit      *int32            `thrift:"storeLimit,12" json:"storeLimit"`
	StoreOffset     *int32            `thrift:"storeOffset,13" json:"storeOffset"`
	ExistenceOnly   *bool             `thrift:"existence_only,14" json:"existence_only"`
	FilterBytes     []byte            `thrift:"filterBytes,15" json:"filterBytes"`
}

func NewTGet() *TGet {
	return &TGet{}
}

func (p *TGet) GetRow() []byte {
	return p.Row
}

var TGet_Columns_DEFAULT []*TColumn

func (p *TGet) GetColumns() []*TColumn {
	return p.Columns
}

var TGet_Timestamp_DEFAULT int64

func (p *TGet) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TGet_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TGet_TimeRange_DEFAULT *TTimeRange

func (p *TGet) GetTimeRange() *TTimeRange {
	if !p.IsSetTimeRange() {
		return TGet_TimeRange_DEFAULT
	}
	return p.TimeRange
}

var TGet_MaxVersions_DEFAULT int32

func (p *TGet) GetMaxVersions() int32 {
	if !p.IsSetMaxVersions() {
		return TGet_MaxVersions_DEFAULT
	}
	return *p.MaxVersions
}

var TGet_FilterString_DEFAULT []byte

func (p *TGet) GetFilterString() []byte {
	return p.FilterString
}

var TGet_Attributes_DEFAULT map[string][]byte

func (p *TGet) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TGet_Authorizations_DEFAULT *TAuthorization

func (p *TGet) GetAuthorizations() *TAuthorization {
	if !p.IsSetAuthorizations() {
		return TGet_Authorizations_DEFAULT
	}
	return p.Authorizations
}

var TGet_Consistency_DEFAULT TConsistency

func (p *TGet) GetConsistency() TConsistency {
	if !p.IsSetConsistency() {
		return TGet_Consistency_DEFAULT
	}
	return *p.Consistency
}

var TGet_TargetReplicaId_DEFAULT int32

func (p *TGet) GetTargetReplicaId() int32 {
	if !p.IsSetTargetReplicaId() {
		return TGet_TargetReplicaId_DEFAULT
	}
	return *p.TargetReplicaId
}

var TGet_CacheBlocks_DEFAULT bool

func (p *TGet) GetCacheBlocks() bool {
	if !p.IsSetCacheBlocks() {
		return TGet_CacheBlocks_DEFAULT
	}
	return *p.CacheBlocks
}

var TGet_StoreLimit_DEFAULT int32

func (p *TGet) GetStoreLimit() int32 {
	if !p.IsSetStoreLimit() {
		return TGet_StoreLimit_DEFAULT
	}
	return *p.StoreLimit
}

var TGet_StoreOffset_DEFAULT int32

func (p *TGet) GetStoreOffset() int32 {
	if !p.IsSetStoreOffset() {
		return TGet_StoreOffset_DEFAULT
	}
	return *p.StoreOffset
}

var TGet_ExistenceOnly_DEFAULT bool

func (p *TGet) GetExistenceOnly() bool {
	if !p.IsSetExistenceOnly() {
		return TGet_ExistenceOnly_DEFAULT
	}
	return *p.ExistenceOnly
}

var TGet_FilterBytes_DEFAULT []byte

func (p *TGet) GetFilterBytes() []byte {
	return p.FilterBytes
}
func (p *TGet) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TGet) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TGet) IsSetTimeRange() bool {
	return p.TimeRange != nil
}

func (p *TGet) IsSetMaxVersions() bool {
	return p.MaxVersions != nil
}

func (p *TGet) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TGet) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TGet) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *TGet) IsSetConsistency() bool {
	return p.Consistency != nil
}

func (p *TGet) IsSetTargetReplicaId() bool {
	return p.TargetReplicaId != nil
}

func (p *TGet) IsSetCacheBlocks() bool {
	return p.CacheBlocks != nil
}

func (p *TGet) IsSetStoreLimit() bool {
	return p.StoreLimit != nil
}

func (p *TGet) IsSetStoreOffset() bool {
	return p.StoreOffset != nil
}

func (p *TGet) IsSetExistenceOnly() bool {
	return p.ExistenceOnly != nil
}

func (p *TGet) IsSetFilterBytes() bool {
	return p.FilterBytes != nil
}

func (p *TGet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TGet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TGet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TColumn{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.Columns = append(p.Columns, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TGet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TGet) ReadField4(iprot thrift.TProtocol) error {
	p.TimeRange = &TTimeRange{}
	if err := p.TimeRange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TimeRange, err)
	}
	return nil
}

func (p *TGet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxVersions = &v
	}
	return nil
}

func (p *TGet) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.FilterString = v
	}
	return nil
}

func (p *TGet) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		var _val4 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val4 = v
		}
		p.Attributes[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TGet) ReadField8(iprot thrift.TProtocol) error {
	p.Authorizations = &TAuthorization{}
	if err := p.Authorizations.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Authorizations, err)
	}
	return nil
}

func (p *TGet) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := TConsistency(v)
		p.Consistency = &temp
	}
	return nil
}

func (p *TGet) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.TargetReplicaId = &v
	}
	return nil
}

func (p *TGet) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.CacheBlocks = &v
	}
	return nil
}

func (p *TGet) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.StoreLimit = &v
	}
	return nil
}

func (p *TGet) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.StoreOffset = &v
	}
	return nil
}

func (p *TGet) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.ExistenceOnly = &v
	}
	return nil
}

func (p *TGet) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.FilterBytes = v
	}
	return nil
}

func (p *TGet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGet"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TGet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TGet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeRange() {
		if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:timeRange: %s", p, err)
		}
		if err := p.TimeRange.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TimeRange, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:timeRange: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterString() {
		if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:filterString: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FilterString); err != nil {
			return fmt.Errorf("%T.filterString (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:filterString: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:authorizations: %s", p, err)
		}
		if err := p.Authorizations.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Authorizations, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:authorizations: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsistency() {
		if err := oprot.WriteFieldBegin("consistency", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:consistency: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Consistency)); err != nil {
			return fmt.Errorf("%T.consistency (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:consistency: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetReplicaId() {
		if err := oprot.WriteFieldBegin("targetReplicaId", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:targetReplicaId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TargetReplicaId)); err != nil {
			return fmt.Errorf("%T.targetReplicaId (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:targetReplicaId: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheBlocks() {
		if err := oprot.WriteFieldBegin("cacheBlocks", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:cacheBlocks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CacheBlocks)); err != nil {
			return fmt.Errorf("%T.cacheBlocks (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:cacheBlocks: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreLimit() {
		if err := oprot.WriteFieldBegin("storeLimit", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:storeLimit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StoreLimit)); err != nil {
			return fmt.Errorf("%T.storeLimit (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:storeLimit: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreOffset() {
		if err := oprot.WriteFieldBegin("storeOffset", thrift.I32, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:storeOffset: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.StoreOffset)); err != nil {
			return fmt.Errorf("%T.storeOffset (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:storeOffset: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetExistenceOnly() {
		if err := oprot.WriteFieldBegin("existence_only", thrift.BOOL, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:existence_only: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.ExistenceOnly)); err != nil {
			return fmt.Errorf("%T.existence_only (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:existence_only: %s", p, err)
		}
	}
	return err
}

func (p *TGet) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterBytes() {
		if err := oprot.WriteFieldBegin("filterBytes", thrift.STRING, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:filterBytes: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FilterBytes); err != nil {
			return fmt.Errorf("%T.filterBytes (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:filterBytes: %s", p, err)
		}
	}
	return err
}

func (p *TGet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGet(%+v)", *p)
}

type TPut struct {
	Row          []byte          `thrift:"row,1,required" json:"row"`
	ColumnValues []*TColumnValue `thrift:"columnValues,2,required" json:"columnValues"`
	Timestamp    *int64          `thrift:"timestamp,3" json:"timestamp"`
	// unused field # 4
	Attributes     map[string][]byte `thrift:"attributes,5" json:"attributes"`
	Durability     *TDurability      `thrift:"durability,6" json:"durability"`
	CellVisibility *TCellVisibility  `thrift:"cellVisibility,7" json:"cellVisibility"`
}

func NewTPut() *TPut {
	return &TPut{}
}

func (p *TPut) GetRow() []byte {
	return p.Row
}

func (p *TPut) GetColumnValues() []*TColumnValue {
	return p.ColumnValues
}

var TPut_Timestamp_DEFAULT int64

func (p *TPut) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TPut_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TPut_Attributes_DEFAULT map[string][]byte

func (p *TPut) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TPut_Durability_DEFAULT TDurability

func (p *TPut) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TPut_Durability_DEFAULT
	}
	return *p.Durability
}

var TPut_CellVisibility_DEFAULT *TCellVisibility

func (p *TPut) GetCellVisibility() *TCellVisibility {
	if !p.IsSetCellVisibility() {
		return TPut_CellVisibility_DEFAULT
	}
	return p.CellVisibility
}
func (p *TPut) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TPut) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TPut) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TPut) IsSetCellVisibility() bool {
	return p.CellVisibility != nil
}

func (p *TPut) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TPut) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TPut) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.ColumnValues = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &TColumnValue{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.ColumnValues = append(p.ColumnValues, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TPut) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TPut) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		var _val7 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val7 = v
		}
		p.Attributes[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TPut) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TPut) ReadField7(iprot thrift.TProtocol) error {
	p.CellVisibility = &TCellVisibility{}
	if err := p.CellVisibility.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CellVisibility, err)
	}
	return nil
}

func (p *TPut) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPut"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TPut) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TPut) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columnValues: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ColumnValues {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columnValues: %s", p, err)
	}
	return err
}

func (p *TPut) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:durability: %s", p, err)
		}
	}
	return err
}

func (p *TPut) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellVisibility() {
		if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:cellVisibility: %s", p, err)
		}
		if err := p.CellVisibility.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CellVisibility, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:cellVisibility: %s", p, err)
		}
	}
	return err
}

func (p *TPut) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPut(%+v)", *p)
}

type TDelete struct {
	Row        []byte      `thrift:"row,1,required" json:"row"`
	Columns    []*TColumn  `thrift:"columns,2" json:"columns"`
	Timestamp  *int64      `thrift:"timestamp,3" json:"timestamp"`
	DeleteType TDeleteType `thrift:"deleteType,4" json:"deleteType"`
	// unused field # 5
	Attributes map[string][]byte `thrift:"attributes,6" json:"attributes"`
	Durability *TDurability      `thrift:"durability,7" json:"durability"`
}

func NewTDelete() *TDelete {
	return &TDelete{
		DeleteType: 1,
	}
}

func (p *TDelete) GetRow() []byte {
	return p.Row
}

var TDelete_Columns_DEFAULT []*TColumn

func (p *TDelete) GetColumns() []*TColumn {
	return p.Columns
}

var TDelete_Timestamp_DEFAULT int64

func (p *TDelete) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TDelete_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TDelete_DeleteType_DEFAULT TDeleteType = 1

func (p *TDelete) GetDeleteType() TDeleteType {
	return p.DeleteType
}

var TDelete_Attributes_DEFAULT map[string][]byte

func (p *TDelete) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TDelete_Durability_DEFAULT TDurability

func (p *TDelete) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TDelete_Durability_DEFAULT
	}
	return *p.Durability
}
func (p *TDelete) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TDelete) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TDelete) IsSetDeleteType() bool {
	return p.DeleteType != TDelete_DeleteType_DEFAULT
}

func (p *TDelete) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TDelete) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TDelete) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TDelete) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TDelete) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &TColumn{}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.Columns = append(p.Columns, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TDelete) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TDelete) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := TDeleteType(v)
		p.DeleteType = temp
	}
	return nil
}

func (p *TDelete) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		var _val10 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val10 = v
		}
		p.Attributes[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TDelete) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TDelete) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDelete"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TDelete) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TDelete) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteType() {
		if err := oprot.WriteFieldBegin("deleteType", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:deleteType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.DeleteType)); err != nil {
			return fmt.Errorf("%T.deleteType (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:deleteType: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:durability: %s", p, err)
		}
	}
	return err
}

func (p *TDelete) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDelete(%+v)", *p)
}

type TIncrement struct {
	Row     []byte              `thrift:"row,1,required" json:"row"`
	Columns []*TColumnIncrement `thrift:"columns,2,required" json:"columns"`
	// unused field # 3
	Attributes     map[string][]byte `thrift:"attributes,4" json:"attributes"`
	Durability     *TDurability      `thrift:"durability,5" json:"durability"`
	CellVisibility *TCellVisibility  `thrift:"cellVisibility,6" json:"cellVisibility"`
	ReturnResults  *bool             `thrift:"returnResults,7" json:"returnResults"`
}

func NewTIncrement() *TIncrement {
	return &TIncrement{}
}

func (p *TIncrement) GetRow() []byte {
	return p.Row
}

func (p *TIncrement) GetColumns() []*TColumnIncrement {
	return p.Columns
}

var TIncrement_Attributes_DEFAULT map[string][]byte

func (p *TIncrement) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TIncrement_Durability_DEFAULT TDurability

func (p *TIncrement) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TIncrement_Durability_DEFAULT
	}
	return *p.Durability
}

var TIncrement_CellVisibility_DEFAULT *TCellVisibility

func (p *TIncrement) GetCellVisibility() *TCellVisibility {
	if !p.IsSetCellVisibility() {
		return TIncrement_CellVisibility_DEFAULT
	}
	return p.CellVisibility
}

var TIncrement_ReturnResults_DEFAULT bool

func (p *TIncrement) GetReturnResults() bool {
	if !p.IsSetReturnResults() {
		return TIncrement_ReturnResults_DEFAULT
	}
	return *p.ReturnResults
}
func (p *TIncrement) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TIncrement) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TIncrement) IsSetCellVisibility() bool {
	return p.CellVisibility != nil
}

func (p *TIncrement) IsSetReturnResults() bool {
	return p.ReturnResults != nil
}

func (p *TIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TIncrement) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnIncrement, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &TColumnIncrement{
			Amount: 1,
		}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.Columns = append(p.Columns, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TIncrement) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		p.Attributes[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TIncrement) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TIncrement) ReadField6(iprot thrift.TProtocol) error {
	p.CellVisibility = &TCellVisibility{}
	if err := p.CellVisibility.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CellVisibility, err)
	}
	return nil
}

func (p *TIncrement) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ReturnResults = &v
	}
	return nil
}

func (p *TIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
	}
	return err
}

func (p *TIncrement) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:durability: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellVisibility() {
		if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:cellVisibility: %s", p, err)
		}
		if err := p.CellVisibility.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CellVisibility, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:cellVisibility: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReturnResults() {
		if err := oprot.WriteFieldBegin("returnResults", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:returnResults: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.ReturnResults)); err != nil {
			return fmt.Errorf("%T.returnResults (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:returnResults: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIncrement(%+v)", *p)
}

type TAppend struct {
	Row            []byte            `thrift:"row,1,required" json:"row"`
	Columns        []*TColumnValue   `thrift:"columns,2,required" json:"columns"`
	Attributes     map[string][]byte `thrift:"attributes,3" json:"attributes"`
	Durability     *TDurability      `thrift:"durability,4" json:"durability"`
	CellVisibility *TCellVisibility  `thrift:"cellVisibility,5" json:"cellVisibility"`
	ReturnResults  *bool             `thrift:"returnResults,6" json:"returnResults"`
}

func NewTAppend() *TAppend {
	return &TAppend{}
}

func (p *TAppend) GetRow() []byte {
	return p.Row
}

func (p *TAppend) GetColumns() []*TColumnValue {
	return p.Columns
}

var TAppend_Attributes_DEFAULT map[string][]byte

func (p *TAppend) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TAppend_Durability_DEFAULT TDurability

func (p *TAppend) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TAppend_Durability_DEFAULT
	}
	return *p.Durability
}

var TAppend_CellVisibility_DEFAULT *TCellVisibility

func (p *TAppend) GetCellVisibility() *TCellVisibility {
	if !p.IsSetCellVisibility() {
		return TAppend_CellVisibility_DEFAULT
	}
	return p.CellVisibility
}

var TAppend_ReturnResults_DEFAULT bool

func (p *TAppend) GetReturnResults() bool {
	if !p.IsSetReturnResults() {
		return TAppend_ReturnResults_DEFAULT
	}
	return *p.ReturnResults
}
func (p *TAppend) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TAppend) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TAppend) IsSetCellVisibility() bool {
	return p.CellVisibility != nil
}

func (p *TAppend) IsSetReturnResults() bool {
	return p.ReturnResults != nil
}

func (p *TAppend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TAppend) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TAppend) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnValue, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &TColumnValue{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.Columns = append(p.Columns, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TAppend) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key15 = v
		}
		var _val16 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val16 = v
		}
		p.Attributes[_key15] = _val16
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TAppend) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TAppend) ReadField5(iprot thrift.TProtocol) error {
	p.CellVisibility = &TCellVisibility{}
	if err := p.CellVisibility.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CellVisibility, err)
	}
	return nil
}

func (p *TAppend) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ReturnResults = &v
	}
	return nil
}

func (p *TAppend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAppend"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TAppend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TAppend) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
	}
	return err
}

func (p *TAppend) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:durability: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellVisibility() {
		if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:cellVisibility: %s", p, err)
		}
		if err := p.CellVisibility.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CellVisibility, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:cellVisibility: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetReturnResults() {
		if err := oprot.WriteFieldBegin("returnResults", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:returnResults: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.ReturnResults)); err != nil {
			return fmt.Errorf("%T.returnResults (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:returnResults: %s", p, err)
		}
	}
	return err
}

func (p *TAppend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAppend(%+v)", *p)
}

type TScan struct {
	StartRow           []byte                 `thrift:"startRow,1" json:"startRow"`
	StopRow            []byte                 `thrift:"stopRow,2" json:"stopRow"`
	Columns            []*TColumn             `thrift:"columns,3" json:"columns"`
	Caching            *int32                 `thrift:"caching,4" json:"caching"`
	MaxVersions        int32                  `thrift:"maxVersions,5" json:"maxVersions"`
	TimeRange          *TTimeRange            `thrift:"timeRange,6" json:"timeRange"`
	FilterString       []byte                 `thrift:"filterString,7" json:"filterString"`
	BatchSize          *int32                 `thrift:"batchSize,8" json:"batchSize"`
	Attributes         map[string][]byte      `thrift:"attributes,9" json:"attributes"`
	Authorizations     *TAuthorization        `thrift:"authorizations,10" json:"authorizations"`
	Reversed           *bool                  `thrift:"reversed,11" json:"reversed"`
	CacheBlocks        *bool                  `thrift:"cacheBlocks,12" json:"cacheBlocks"`
	ColFamTimeRangeMap map[string]*TTimeRange `thrift:"colFamTimeRangeMap,13" json:"colFamTimeRangeMap"`
	ReadType           *TReadType             `thrift:"readType,14" json:"readType"`
	Limit              *int32                 `thrift:"limit,15" json:"limit"`
	Consistency        *TConsistency          `thrift:"consistency,16" json:"consistency"`
	TargetReplicaId    *int32                 `thrift:"targetReplicaId,17" json:"targetReplicaId"`
	FilterBytes        []byte                 `thrift:"filterBytes,18" json:"filterBytes"`
}

func NewTScan() *TScan {
	return &TScan{
		MaxVersions: 1,
	}
}

var TScan_StartRow_DEFAULT []byte

func (p *TScan) GetStartRow() []byte {
	return p.StartRow
}

var TScan_StopRow_DEFAULT []byte

func (p *TScan) GetStopRow() []byte {
	return p.StopRow
}

var TScan_Columns_DEFAULT []*TColumn

func (p *TScan) GetColumns() []*TColumn {
	return p.Columns
}

var TScan_Caching_DEFAULT int32

func (p *TScan) GetCaching() int32 {
	if !p.IsSetCaching() {
		return TScan_Caching_DEFAULT
	}
	return *p.Caching
}

var TScan_MaxVersions_DEFAULT int32 = 1

func (p *TScan) GetMaxVersions() int32 {
	return p.MaxVersions
}

var TScan_TimeRange_DEFAULT *TTimeRange

func (p *TScan) GetTimeRange() *TTimeRange {
	if !p.IsSetTimeRange() {
		return TScan_TimeRange_DEFAULT
	}
	return p.TimeRange
}

var TScan_FilterString_DEFAULT []byte

func (p *TScan) GetFilterString() []byte {
	return p.FilterString
}

var TScan_BatchSize_DEFAULT int32

func (p *TScan) GetBatchSize() int32 {
	if !p.IsSetBatchSize() {
		return TScan_BatchSize_DEFAULT
	}
	return *p.BatchSize
}

var TScan_Attributes_DEFAULT map[string][]byte

func (p *TScan) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TScan_Authorizations_DEFAULT *TAuthorization

func (p *TScan) GetAuthorizations() *TAuthorization {
	if !p.IsSetAuthorizations() {
		return TScan_Authorizations_DEFAULT
	}
	return p.Authorizations
}

var TScan_Reversed_DEFAULT bool

func (p *TScan) GetReversed() bool {
	if !p.IsSetReversed() {
		return TScan_Reversed_DEFAULT
	}
	return *p.Reversed
}

var TScan_CacheBlocks_DEFAULT bool

func (p *TScan) GetCacheBlocks() bool {
	if !p.IsSetCacheBlocks() {
		return TScan_CacheBlocks_DEFAULT
	}
	return *p.CacheBlocks
}

var TScan_ColFamTimeRangeMap_DEFAULT map[string]*TTimeRange

func (p *TScan) GetColFamTimeRangeMap() map[string]*TTimeRange {
	return p.ColFamTimeRangeMap
}

var TScan_ReadType_DEFAULT TReadType

func (p *TScan) GetReadType() TReadType {
	if !p.IsSetReadType() {
		return TScan_ReadType_DEFAULT
	}
	return *p.ReadType
}

var TScan_Limit_DEFAULT int32

func (p *TScan) GetLimit() int32 {
	if !p.IsSetLimit() {
		return TScan_Limit_DEFAULT
	}
	return *p.Limit
}

var TScan_Consistency_DEFAULT TConsistency

func (p *TScan) GetConsistency() TConsistency {
	if !p.IsSetConsistency() {
		return TScan_Consistency_DEFAULT
	}
	return *p.Consistency
}

var TScan_TargetReplicaId_DEFAULT int32

func (p *TScan) GetTargetReplicaId() int32 {
	if !p.IsSetTargetReplicaId() {
		return TScan_TargetReplicaId_DEFAULT
	}
	return *p.TargetReplicaId
}

var TScan_FilterBytes_DEFAULT []byte

func (p *TScan) GetFilterBytes() []byte {
	return p.FilterBytes
}
func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != nil
}

func (p *TScan) IsSetMaxVersions() bool {
	return p.MaxVersions != TScan_MaxVersions_DEFAULT
}

func (p *TScan) IsSetTimeRange() bool {
	return p.TimeRange != nil
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TScan) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TScan) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *TScan) IsSetReversed() bool {
	return p.Reversed != nil
}

func (p *TScan) IsSetCacheBlocks() bool {
	return p.CacheBlocks != nil
}

func (p *TScan) IsSetColFamTimeRangeMap() bool {
	return p.ColFamTimeRangeMap != nil
}

func (p *TScan) IsSetReadType() bool {
	return p.ReadType != nil
}

func (p *TScan) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *TScan) IsSetConsistency() bool {
	return p.Consistency != nil
}

func (p *TScan) IsSetTargetReplicaId() bool {
	return p.TargetReplicaId != nil
}

func (p *TScan) IsSetFilterBytes() bool {
	return p.FilterBytes != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TScan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *TScan) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StopRow = v
	}
	return nil
}

func (p *TScan) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &TColumn{}
		if err := _elem17.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem17, err)
		}
		p.Columns = append(p.Columns, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TScan) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Caching = &v
	}
	return nil
}

func (p *TScan) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxVersions = v
	}
	return nil
}

func (p *TScan) ReadField6(iprot thrift.TProtocol) error {
	p.TimeRange = &TTimeRange{}
	if err := p.TimeRange.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TimeRange, err)
	}
	return nil
}

func (p *TScan) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.FilterString = v
	}
	return nil
}

func (p *TScan) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.BatchSize = &v
	}
	return nil
}

func (p *TScan) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key18 = v
		}
		var _val19 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val19 = v
		}
		p.Attributes[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TScan) ReadField10(iprot thrift.TProtocol) error {
	p.Authorizations = &TAuthorization{}
	if err := p.Authorizations.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Authorizations, err)
	}
	return nil
}

func (p *TScan) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Reversed = &v
	}
	return nil
}

func (p *TScan) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.CacheBlocks = &v
	}
	return nil
}

func (p *TScan) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*TTimeRange, size)
	p.ColFamTimeRangeMap = tMap
	for i := 0; i < size; i++ {
		var _key20 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key20 = v
		}
		_val21 := &TTimeRange{}
		if err := _val21.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val21, err)
		}
		p.ColFamTimeRangeMap[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TScan) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		temp := TReadType(v)
		p.ReadType = &temp
	}
	return nil
}

func (p *TScan) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *TScan) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		temp := TConsistency(v)
		p.Consistency = &temp
	}
	return nil
}

func (p *TScan) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.TargetReplicaId = &v
	}
	return nil
}

func (p *TScan) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.FilterBytes = v
	}
	return nil
}

func (p *TScan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TScan"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartRow() {
		if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:startRow: %s", p, err)
		}
		if err := oprot.WriteBinary(p.StartRow); err != nil {
			return fmt.Errorf("%T.startRow (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:startRow: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopRow() {
		if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:stopRow: %s", p, err)
		}
		if err := oprot.WriteBinary(p.StopRow); err != nil {
			return fmt.Errorf("%T.stopRow (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:stopRow: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:columns: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaching() {
		if err := oprot.WriteFieldBegin("caching", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:caching: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Caching)); err != nil {
			return fmt.Errorf("%T.caching (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:caching: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeRange() {
		if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:timeRange: %s", p, err)
		}
		if err := p.TimeRange.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TimeRange, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:timeRange: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterString() {
		if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:filterString: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FilterString); err != nil {
			return fmt.Errorf("%T.filterString (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:filterString: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err := oprot.WriteFieldBegin("batchSize", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:batchSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BatchSize)); err != nil {
			return fmt.Errorf("%T.batchSize (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:batchSize: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:authorizations: %s", p, err)
		}
		if err := p.Authorizations.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Authorizations, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:authorizations: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetReversed() {
		if err := oprot.WriteFieldBegin("reversed", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:reversed: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Reversed)); err != nil {
			return fmt.Errorf("%T.reversed (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:reversed: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheBlocks() {
		if err := oprot.WriteFieldBegin("cacheBlocks", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:cacheBlocks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CacheBlocks)); err != nil {
			return fmt.Errorf("%T.cacheBlocks (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:cacheBlocks: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetColFamTimeRangeMap() {
		if err := oprot.WriteFieldBegin("colFamTimeRangeMap", thrift.MAP, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:colFamTimeRangeMap: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ColFamTimeRangeMap)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.ColFamTimeRangeMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:colFamTimeRangeMap: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadType() {
		if err := oprot.WriteFieldBegin("readType", thrift.I32, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:readType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ReadType)); err != nil {
			return fmt.Errorf("%T.readType (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:readType: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:limit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Limit)); err != nil {
			return fmt.Errorf("%T.limit (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:limit: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetConsistency() {
		if err := oprot.WriteFieldBegin("consistency", thrift.I32, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:consistency: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Consistency)); err != nil {
			return fmt.Errorf("%T.consistency (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:consistency: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetReplicaId() {
		if err := oprot.WriteFieldBegin("targetReplicaId", thrift.I32, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:targetReplicaId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TargetReplicaId)); err != nil {
			return fmt.Errorf("%T.targetReplicaId (17) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:targetReplicaId: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterBytes() {
		if err := oprot.WriteFieldBegin("filterBytes", thrift.STRING, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:filterBytes: %s", p, err)
		}
		if err := oprot.WriteBinary(p.FilterBytes); err != nil {
			return fmt.Errorf("%T.filterBytes (18) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:filterBytes: %s", p, err)
		}
	}
	return err
}

func (p *TScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScan(%+v)", *p)
}

type TMutation struct {
	Put          *TPut    `thrift:"put,1" json:"put"`
	DeleteSingle *TDelete `thrift:"deleteSingle,2" json:"deleteSingle"`
}

func NewTMutation() *TMutation {
	return &TMutation{}
}

var TMutation_Put_DEFAULT *TPut

func (p *TMutation) GetPut() *TPut {
	if !p.IsSetPut() {
		return TMutation_Put_DEFAULT
	}
	return p.Put
}

var TMutation_DeleteSingle_DEFAULT *TDelete

func (p *TMutation) GetDeleteSingle() *TDelete {
	if !p.IsSetDeleteSingle() {
		return TMutation_DeleteSingle_DEFAULT
	}
	return p.DeleteSingle
}
func (p *TMutation) IsSetPut() bool {
	return p.Put != nil
}

func (p *TMutation) IsSetDeleteSingle() bool {
	return p.DeleteSingle != nil
}

func (p *TMutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMutation) ReadField1(iprot thrift.TProtocol) error {
	p.Put = &TPut{}
	if err := p.Put.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Put, err)
	}
	return nil
}

func (p *TMutation) ReadField2(iprot thrift.TProtocol) error {
	p.DeleteSingle = &TDelete{
		DeleteType: 1,
	}
	if err := p.DeleteSingle.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.DeleteSingle, err)
	}
	return nil
}

func (p *TMutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMutation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TMutation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("put", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:put: %s", p, err)
	}
	if err := p.Put.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Put, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:put: %s", p, err)
	}
	return err
}

func (p *TMutation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteSingle", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deleteSingle: %s", p, err)
	}
	if err := p.DeleteSingle.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.DeleteSingle, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deleteSingle: %s", p, err)
	}
	return err
}

func (p *TMutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMutation(%+v)", *p)
}

type TRowMutations struct {
	Row       []byte       `thrift:"row,1,required" json:"row"`
	Mutations []*TMutation `thrift:"mutations,2,required" json:"mutations"`
}

func NewTRowMutations() *TRowMutations {
	return &TRowMutations{}
}

func (p *TRowMutations) GetRow() []byte {
	return p.Row
}

func (p *TRowMutations) GetMutations() []*TMutation {
	return p.Mutations
}
func (p *TRowMutations) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TRowMutations) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *TRowMutations) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TMutation, 0, size)
	p.Mutations = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &TMutation{}
		if err := _elem22.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem22, err)
		}
		p.Mutations = append(p.Mutations, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TRowMutations) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowMutations"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TRowMutations) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *TRowMutations) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mutations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Mutations {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mutations: %s", p, err)
	}
	return err
}

func (p *TRowMutations) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowMutations(%+v)", *p)
}

type THRegionInfo struct {
	RegionId  int64  `thrift:"regionId,1,required" json:"regionId"`
	TableName []byte `thrift:"tableName,2,required" json:"tableName"`
	StartKey  []byte `thrift:"startKey,3" json:"startKey"`
	EndKey    []byte `thrift:"endKey,4" json:"endKey"`
	Offline   *bool  `thrift:"offline,5" json:"offline"`
	Split     *bool  `thrift:"split,6" json:"split"`
	ReplicaId *int32 `thrift:"replicaId,7" json:"replicaId"`
}

func NewTHRegionInfo() *THRegionInfo {
	return &THRegionInfo{}
}

func (p *THRegionInfo) GetRegionId() int64 {
	return p.RegionId
}

func (p *THRegionInfo) GetTableName() []byte {
	return p.TableName
}

var THRegionInfo_StartKey_DEFAULT []byte

func (p *THRegionInfo) GetStartKey() []byte {
	return p.StartKey
}

var THRegionInfo_EndKey_DEFAULT []byte

func (p *THRegionInfo) GetEndKey() []byte {
	return p.EndKey
}

var THRegionInfo_Offline_DEFAULT bool

func (p *THRegionInfo) GetOffline() bool {
	if !p.IsSetOffline() {
		return THRegionInfo_Offline_DEFAULT
	}
	return *p.Offline
}

var THRegionInfo_Split_DEFAULT bool

func (p *THRegionInfo) GetSplit() bool {
	if !p.IsSetSplit() {
		return THRegionInfo_Split_DEFAULT
	}
	return *p.Split
}

var THRegionInfo_ReplicaId_DEFAULT int32

func (p *THRegionInfo) GetReplicaId() int32 {
	if !p.IsSetReplicaId() {
		return THRegionInfo_ReplicaId_DEFAULT
	}
	return *p.ReplicaId
}
func (p *THRegionInfo) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *THRegionInfo) IsSetEndKey() bool {
	return p.EndKey != nil
}

func (p *THRegionInfo) IsSetOffline() bool {
	return p.Offline != nil
}

func (p *THRegionInfo) IsSetSplit() bool {
	return p.Split != nil
}

func (p *THRegionInfo) IsSetReplicaId() bool {
	return p.ReplicaId != nil
}

func (p *THRegionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *THRegionInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RegionId = v
	}
	return nil
}

func (p *THRegionInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *THRegionInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartKey = v
	}
	return nil
}

func (p *THRegionInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.EndKey = v
	}
	return nil
}

func (p *THRegionInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Offline = &v
	}
	return nil
}

func (p *THRegionInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Split = &v
	}
	return nil
}

func (p *THRegionInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ReplicaId = &v
	}
	return nil
}

func (p *THRegionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THRegionInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *THRegionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:regionId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RegionId)); err != nil {
		return fmt.Errorf("%T.regionId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:regionId: %s", p, err)
	}
	return err
}

func (p *THRegionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tableName: %s", p, err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return fmt.Errorf("%T.tableName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tableName: %s", p, err)
	}
	return err
}

func (p *THRegionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartKey() {
		if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:startKey: %s", p, err)
		}
		if err := oprot.WriteBinary(p.StartKey); err != nil {
			return fmt.Errorf("%T.startKey (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:startKey: %s", p, err)
		}
	}
	return err
}

func (p *THRegionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndKey() {
		if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:endKey: %s", p, err)
		}
		if err := oprot.WriteBinary(p.EndKey); err != nil {
			return fmt.Errorf("%T.endKey (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:endKey: %s", p, err)
		}
	}
	return err
}

func (p *THRegionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffline() {
		if err := oprot.WriteFieldBegin("offline", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:offline: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Offline)); err != nil {
			return fmt.Errorf("%T.offline (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:offline: %s", p, err)
		}
	}
	return err
}

func (p *THRegionInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplit() {
		if err := oprot.WriteFieldBegin("split", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:split: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Split)); err != nil {
			return fmt.Errorf("%T.split (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:split: %s", p, err)
		}
	}
	return err
}

func (p *THRegionInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err := oprot.WriteFieldBegin("replicaId", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:replicaId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ReplicaId)); err != nil {
			return fmt.Errorf("%T.replicaId (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:replicaId: %s", p, err)
		}
	}
	return err
}

func (p *THRegionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THRegionInfo(%+v)", *p)
}

type TServerName struct {
	HostName  string `thrift:"hostName,1,required" json:"hostName"`
	Port      *int32 `thrift:"port,2" json:"port"`
	StartCode *int64 `thrift:"startCode,3" json:"startCode"`
}

func NewTServerName() *TServerName {
	return &TServerName{}
}

func (p *TServerName) GetHostName() string {
	return p.HostName
}

var TServerName_Port_DEFAULT int32

func (p *TServerName) GetPort() int32 {
	if !p.IsSetPort() {
		return TServerName_Port_DEFAULT
	}
	return *p.Port
}

var TServerName_StartCode_DEFAULT int64

func (p *TServerName) GetStartCode() int64 {
	if !p.IsSetStartCode() {
		return TServerName_StartCode_DEFAULT
	}
	return *p.StartCode
}
func (p *TServerName) IsSetPort() bool {
	return p.Port != nil
}

func (p *TServerName) IsSetStartCode() bool {
	return p.StartCode != nil
}

func (p *TServerName) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TServerName) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.HostName = v
	}
	return nil
}

func (p *TServerName) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *TServerName) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StartCode = &v
	}
	return nil
}

func (p *TServerName) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TServerName"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TServerName) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hostName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.HostName)); err != nil {
		return fmt.Errorf("%T.hostName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hostName: %s", p, err)
	}
	return err
}

func (p *TServerName) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:port: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Port)); err != nil {
			return fmt.Errorf("%T.port (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:port: %s", p, err)
		}
	}
	return err
}

func (p *TServerName) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartCode() {
		if err := oprot.WriteFieldBegin("startCode", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:startCode: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartCode)); err != nil {
			return fmt.Errorf("%T.startCode (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:startCode: %s", p, err)
		}
	}
	return err
}

func (p *TServerName) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TServerName(%+v)", *p)
}

type THRegionLocation struct {
	ServerName *TServerName  `thrift:"serverName,1,required" json:"serverName"`
	RegionInfo *THRegionInfo `thrift:"regionInfo,2,required" json:"regionInfo"`
}

func NewTHRegionLocation() *THRegionLocation {
	return &THRegionLocation{}
}

var THRegionLocation_ServerName_DEFAULT *TServerName

func (p *THRegionLocation) GetServerName() *TServerName {
	if !p.IsSetServerName() {
		return THRegionLocation_ServerName_DEFAULT
	}
	return p.ServerName
}

var THRegionLocation_RegionInfo_DEFAULT *THRegionInfo

func (p *THRegionLocation) GetRegionInfo() *THRegionInfo {
	if !p.IsSetRegionInfo() {
		return THRegionLocation_RegionInfo_DEFAULT
	}
	return p.RegionInfo
}
func (p *THRegionLocation) IsSetServerName() bool {
	return p.ServerName != nil
}

func (p *THRegionLocation) IsSetRegionInfo() bool {
	return p.RegionInfo != nil
}

func (p *THRegionLocation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *THRegionLocation) ReadField1(iprot thrift.TProtocol) error {
	p.ServerName = &TServerName{}
	if err := p.ServerName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ServerName, err)
	}
	return nil
}

func (p *THRegionLocation) ReadField2(iprot thrift.TProtocol) error {
	p.RegionInfo = &THRegionInfo{}
	if err := p.RegionInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RegionInfo, err)
	}
	return nil
}

func (p *THRegionLocation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THRegionLocation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *THRegionLocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:serverName: %s", p, err)
	}
	if err := p.ServerName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ServerName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:serverName: %s", p, err)
	}
	return err
}

func (p *THRegionLocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regionInfo", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:regionInfo: %s", p, err)
	}
	if err := p.RegionInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.RegionInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:regionInfo: %s", p, err)
	}
	return err
}

func (p *THRegionLocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THRegionLocation(%+v)", *p)
}

type TTableName struct {
	Ns        []byte `thrift:"ns,1" json:"ns"`
	Qualifier []byte `thrift:"qualifier,2,required" json:"qualifier"`
}

func NewTTableName() *TTableName {
	return &TTableName{}
}

var TTableName_Ns_DEFAULT []byte

func (p *TTableName) GetNs() []byte {
	return p.Ns
}

func (p *TTableName) GetQualifier() []byte {
	return p.Qualifier
}
func (p *TTableName) IsSetNs() bool {
	return p.Ns != nil
}

func (p *TTableName) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TTableName) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Ns = v
	}
	return nil
}

func (p *TTableName) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *TTableName) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableName"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TTableName) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNs() {
		if err := oprot.WriteFieldBegin("ns", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ns: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Ns); err != nil {
			return fmt.Errorf("%T.ns (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ns: %s", p, err)
		}
	}
	return err
}

func (p *TTableName) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Qualifier); err != nil {
		return fmt.Errorf("%T.qualifier (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
	}
	return err
}

func (p *TTableName) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableName(%+v)", *p)
}

type TColumnFamilyDescriptor struct {
	Name                []byte                 `thrift:"name,1,required" json:"name"`
	Attributes          map[string][]byte      `thrift:"attributes,2" json:"attributes"`
	Configuration       map[string]string      `thrift:"configuration,3" json:"configuration"`
	BlockSize           *int32                 `thrift:"blockSize,4" json:"blockSize"`
	BloomnFilterType    *TBloomFilterType      `thrift:"bloomnFilterType,5" json:"bloomnFilterType"`
	CompressionType     *TCompressionAlgorithm `thrift:"compressionType,6" json:"compressionType"`
	DfsReplication      *int16                 `thrift:"dfsReplication,7" json:"dfsReplication"`
	DataBlockEncoding   *TDataBlockEncoding    `thrift:"dataBlockEncoding,8" json:"dataBlockEncoding"`
	KeepDeletedCells    *TKeepDeletedCells     `thrift:"keepDeletedCells,9" json:"keepDeletedCells"`
	MaxVersions         *int32                 `thrift:"maxVersions,10" json:"maxVersions"`
	MinVersions         *int32                 `thrift:"minVersions,11" json:"minVersions"`
	Scope               *int32                 `thrift:"scope,12" json:"scope"`
	TimeToLive          *int32                 `thrift:"timeToLive,13" json:"timeToLive"`
	BlockCacheEnabled   *bool                  `thrift:"blockCacheEnabled,14" json:"blockCacheEnabled"`
	CacheBloomsOnWrite  *bool                  `thrift:"cacheBloomsOnWrite,15" json:"cacheBloomsOnWrite"`
	CacheDataOnWrite    *bool                  `thrift:"cacheDataOnWrite,16" json:"cacheDataOnWrite"`
	CacheIndexesOnWrite *bool                  `thrift:"cacheIndexesOnWrite,17" json:"cacheIndexesOnWrite"`
	CompressTags        *bool                  `thrift:"compressTags,18" json:"compressTags"`
	EvictBlocksOnClose  *bool                  `thrift:"evictBlocksOnClose,19" json:"evictBlocksOnClose"`
	InMemory            *bool                  `thrift:"inMemory,20" json:"inMemory"`
}

func NewTColumnFamilyDescriptor() *TColumnFamilyDescriptor {
	return &TColumnFamilyDescriptor{}
}

func (p *TColumnFamilyDescriptor) GetName() []byte {
	return p.Name
}

var TColumnFamilyDescriptor_Attributes_DEFAULT map[string][]byte

func (p *TColumnFamilyDescriptor) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TColumnFamilyDescriptor_Configuration_DEFAULT map[string]string

func (p *TColumnFamilyDescriptor) GetConfiguration() map[string]string {
	return p.Configuration
}

var TColumnFamilyDescriptor_BlockSize_DEFAULT int32

func (p *TColumnFamilyDescriptor) GetBlockSize() int32 {
	if !p.IsSetBlockSize() {
		return TColumnFamilyDescriptor_BlockSize_DEFAULT
	}
	return *p.BlockSize
}

var TColumnFamilyDescriptor_BloomnFilterType_DEFAULT TBloomFilterType

func (p *TColumnFamilyDescriptor) GetBloomnFilterType() TBloomFilterType {
	if !p.IsSetBloomnFilterType() {
		return TColumnFamilyDescriptor_BloomnFilterType_DEFAULT
	}
	return *p.BloomnFilterType
}

var TColumnFamilyDescriptor_CompressionType_DEFAULT TCompressionAlgorithm

func (p *TColumnFamilyDescriptor) GetCompressionType() TCompressionAlgorithm {
	if !p.IsSetCompressionType() {
		return TColumnFamilyDescriptor_CompressionType_DEFAULT
	}
	return *p.CompressionType
}

var TColumnFamilyDescriptor_DfsReplication_DEFAULT int16

func (p *TColumnFamilyDescriptor) GetDfsReplication() int16 {
	if !p.IsSetDfsReplication() {
		return TColumnFamilyDescriptor_DfsReplication_DEFAULT
	}
	return *p.DfsReplication
}

var TColumnFamilyDescriptor_DataBlockEncoding_DEFAULT TDataBlockEncoding

func (p *TColumnFamilyDescriptor) GetDataBlockEncoding() TDataBlockEncoding {
	if !p.IsSetDataBlockEncoding() {
		return TColumnFamilyDescriptor_DataBlockEncoding_DEFAULT
	}
	return *p.DataBlockEncoding
}

var TColumnFamilyDescriptor_KeepDeletedCells_DEFAULT TKeepDeletedCells

func (p *TColumnFamilyDescriptor) GetKeepDeletedCells() TKeepDeletedCells {
	if !p.IsSetKeepDeletedCells() {
		return TColumnFamilyDescriptor_KeepDeletedCells_DEFAULT
	}
	return *p.KeepDeletedCells
}

var TColumnFamilyDescriptor_MaxVersions_DEFAULT int32

func (p *TColumnFamilyDescriptor) GetMaxVersions() int32 {
	if !p.IsSetMaxVersions() {
		return TColumnFamilyDescriptor_MaxVersions_DEFAULT
	}
	return *p.MaxVersions
}

var TColumnFamilyDescriptor_MinVersions_DEFAULT int32

func (p *TColumnFamilyDescriptor) GetMinVersions() int32 {
	if !p.IsSetMinVersions() {
		return TColumnFamilyDescriptor_MinVersions_DEFAULT
	}
	return *p.MinVersions
}

var TColumnFamilyDescriptor_Scope_DEFAULT int32

func (p *TColumnFamilyDescriptor) GetScope() int32 {
	if !p.IsSetScope() {
		return TColumnFamilyDescriptor_Scope_DEFAULT
	}
	return *p.Scope
}

var TColumnFamilyDescriptor_TimeToLive_DEFAULT int32

func (p *TColumnFamilyDescriptor) GetTimeToLive() int32 {
	if !p.IsSetTimeToLive() {
		return TColumnFamilyDescriptor_TimeToLive_DEFAULT
	}
	return *p.TimeToLive
}

var TColumnFamilyDescriptor_BlockCacheEnabled_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetBlockCacheEnabled() bool {
	if !p.IsSetBlockCacheEnabled() {
		return TColumnFamilyDescriptor_BlockCacheEnabled_DEFAULT
	}
	return *p.BlockCacheEnabled
}

var TColumnFamilyDescriptor_CacheBloomsOnWrite_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetCacheBloomsOnWrite() bool {
	if !p.IsSetCacheBloomsOnWrite() {
		return TColumnFamilyDescriptor_CacheBloomsOnWrite_DEFAULT
	}
	return *p.CacheBloomsOnWrite
}

var TColumnFamilyDescriptor_CacheDataOnWrite_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetCacheDataOnWrite() bool {
	if !p.IsSetCacheDataOnWrite() {
		return TColumnFamilyDescriptor_CacheDataOnWrite_DEFAULT
	}
	return *p.CacheDataOnWrite
}

var TColumnFamilyDescriptor_CacheIndexesOnWrite_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetCacheIndexesOnWrite() bool {
	if !p.IsSetCacheIndexesOnWrite() {
		return TColumnFamilyDescriptor_CacheIndexesOnWrite_DEFAULT
	}
	return *p.CacheIndexesOnWrite
}

var TColumnFamilyDescriptor_CompressTags_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetCompressTags() bool {
	if !p.IsSetCompressTags() {
		return TColumnFamilyDescriptor_CompressTags_DEFAULT
	}
	return *p.CompressTags
}

var TColumnFamilyDescriptor_EvictBlocksOnClose_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetEvictBlocksOnClose() bool {
	if !p.IsSetEvictBlocksOnClose() {
		return TColumnFamilyDescriptor_EvictBlocksOnClose_DEFAULT
	}
	return *p.EvictBlocksOnClose
}

var TColumnFamilyDescriptor_InMemory_DEFAULT bool

func (p *TColumnFamilyDescriptor) GetInMemory() bool {
	if !p.IsSetInMemory() {
		return TColumnFamilyDescriptor_InMemory_DEFAULT
	}
	return *p.InMemory
}
func (p *TColumnFamilyDescriptor) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TColumnFamilyDescriptor) IsSetConfiguration() bool {
	return p.Configuration != nil
}

func (p *TColumnFamilyDescriptor) IsSetBlockSize() bool {
	return p.BlockSize != nil
}

func (p *TColumnFamilyDescriptor) IsSetBloomnFilterType() bool {
	return p.BloomnFilterType != nil
}

func (p *TColumnFamilyDescriptor) IsSetCompressionType() bool {
	return p.CompressionType != nil
}

func (p *TColumnFamilyDescriptor) IsSetDfsReplication() bool {
	return p.DfsReplication != nil
}

func (p *TColumnFamilyDescriptor) IsSetDataBlockEncoding() bool {
	return p.DataBlockEncoding != nil
}

func (p *TColumnFamilyDescriptor) IsSetKeepDeletedCells() bool {
	return p.KeepDeletedCells != nil
}

func (p *TColumnFamilyDescriptor) IsSetMaxVersions() bool {
	return p.MaxVersions != nil
}

func (p *TColumnFamilyDescriptor) IsSetMinVersions() bool {
	return p.MinVersions != nil
}

func (p *TColumnFamilyDescriptor) IsSetScope() bool {
	return p.Scope != nil
}

func (p *TColumnFamilyDescriptor) IsSetTimeToLive() bool {
	return p.TimeToLive != nil
}

func (p *TColumnFamilyDescriptor) IsSetBlockCacheEnabled() bool {
	return p.BlockCacheEnabled != nil
}

func (p *TColumnFamilyDescriptor) IsSetCacheBloomsOnWrite() bool {
	return p.CacheBloomsOnWrite != nil
}

func (p *TColumnFamilyDescriptor) IsSetCacheDataOnWrite() bool {
	return p.CacheDataOnWrite != nil
}

func (p *TColumnFamilyDescriptor) IsSetCacheIndexesOnWrite() bool {
	return p.CacheIndexesOnWrite != nil
}

func (p *TColumnFamilyDescriptor) IsSetCompressTags() bool {
	return p.CompressTags != nil
}

func (p *TColumnFamilyDescriptor) IsSetEvictBlocksOnClose() bool {
	return p.EvictBlocksOnClose != nil
}

func (p *TColumnFamilyDescriptor) IsSetInMemory() bool {
	return p.InMemory != nil
}

func (p *TColumnFamilyDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key23 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key23 = v
		}
		var _val24 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val24 = v
		}
		p.Attributes[_key23] = _val24
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Configuration = tMap
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key25 = v
		}
		var _val26 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val26 = v
		}
		p.Configuration[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BlockSize = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := TBloomFilterType(v)
		p.BloomnFilterType = &temp
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := TCompressionAlgorithm(v)
		p.CompressionType = &temp
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.DfsReplication = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := TDataBlockEncoding(v)
		p.DataBlockEncoding = &temp
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := TKeepDeletedCells(v)
		p.KeepDeletedCells = &temp
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.MaxVersions = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.MinVersions = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.Scope = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.TimeToLive = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.BlockCacheEnabled = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.CacheBloomsOnWrite = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.CacheDataOnWrite = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.CacheIndexesOnWrite = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.CompressTags = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		p.EvictBlocksOnClose = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.InMemory = &v
	}
	return nil
}

func (p *TColumnFamilyDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumnFamilyDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumnFamilyDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Name); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfiguration() {
		if err := oprot.WriteFieldBegin("configuration", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:configuration: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Configuration)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Configuration {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:configuration: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlockSize() {
		if err := oprot.WriteFieldBegin("blockSize", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:blockSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BlockSize)); err != nil {
			return fmt.Errorf("%T.blockSize (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:blockSize: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBloomnFilterType() {
		if err := oprot.WriteFieldBegin("bloomnFilterType", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:bloomnFilterType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.BloomnFilterType)); err != nil {
			return fmt.Errorf("%T.bloomnFilterType (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:bloomnFilterType: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressionType() {
		if err := oprot.WriteFieldBegin("compressionType", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:compressionType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.CompressionType)); err != nil {
			return fmt.Errorf("%T.compressionType (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:compressionType: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDfsReplication() {
		if err := oprot.WriteFieldBegin("dfsReplication", thrift.I16, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:dfsReplication: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.DfsReplication)); err != nil {
			return fmt.Errorf("%T.dfsReplication (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:dfsReplication: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataBlockEncoding() {
		if err := oprot.WriteFieldBegin("dataBlockEncoding", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:dataBlockEncoding: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.DataBlockEncoding)); err != nil {
			return fmt.Errorf("%T.dataBlockEncoding (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:dataBlockEncoding: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeepDeletedCells() {
		if err := oprot.WriteFieldBegin("keepDeletedCells", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:keepDeletedCells: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.KeepDeletedCells)); err != nil {
			return fmt.Errorf("%T.keepDeletedCells (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:keepDeletedCells: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:maxVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.maxVersions (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:maxVersions: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinVersions() {
		if err := oprot.WriteFieldBegin("minVersions", thrift.I32, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:minVersions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MinVersions)); err != nil {
			return fmt.Errorf("%T.minVersions (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:minVersions: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetScope() {
		if err := oprot.WriteFieldBegin("scope", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:scope: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Scope)); err != nil {
			return fmt.Errorf("%T.scope (12) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:scope: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeToLive() {
		if err := oprot.WriteFieldBegin("timeToLive", thrift.I32, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:timeToLive: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TimeToLive)); err != nil {
			return fmt.Errorf("%T.timeToLive (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:timeToLive: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlockCacheEnabled() {
		if err := oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:blockCacheEnabled: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.BlockCacheEnabled)); err != nil {
			return fmt.Errorf("%T.blockCacheEnabled (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:blockCacheEnabled: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheBloomsOnWrite() {
		if err := oprot.WriteFieldBegin("cacheBloomsOnWrite", thrift.BOOL, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:cacheBloomsOnWrite: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CacheBloomsOnWrite)); err != nil {
			return fmt.Errorf("%T.cacheBloomsOnWrite (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:cacheBloomsOnWrite: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheDataOnWrite() {
		if err := oprot.WriteFieldBegin("cacheDataOnWrite", thrift.BOOL, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:cacheDataOnWrite: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CacheDataOnWrite)); err != nil {
			return fmt.Errorf("%T.cacheDataOnWrite (16) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:cacheDataOnWrite: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheIndexesOnWrite() {
		if err := oprot.WriteFieldBegin("cacheIndexesOnWrite", thrift.BOOL, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:cacheIndexesOnWrite: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CacheIndexesOnWrite)); err != nil {
			return fmt.Errorf("%T.cacheIndexesOnWrite (17) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:cacheIndexesOnWrite: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressTags() {
		if err := oprot.WriteFieldBegin("compressTags", thrift.BOOL, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:compressTags: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.CompressTags)); err != nil {
			return fmt.Errorf("%T.compressTags (18) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:compressTags: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvictBlocksOnClose() {
		if err := oprot.WriteFieldBegin("evictBlocksOnClose", thrift.BOOL, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:evictBlocksOnClose: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.EvictBlocksOnClose)); err != nil {
			return fmt.Errorf("%T.evictBlocksOnClose (19) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:evictBlocksOnClose: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetInMemory() {
		if err := oprot.WriteFieldBegin("inMemory", thrift.BOOL, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:inMemory: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.InMemory)); err != nil {
			return fmt.Errorf("%T.inMemory (20) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:inMemory: %s", p, err)
		}
	}
	return err
}

func (p *TColumnFamilyDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnFamilyDescriptor(%+v)", *p)
}

type TTableDescriptor struct {
	TableName  *TTableName                `thrift:"tableName,1,required" json:"tableName"`
	Columns    []*TColumnFamilyDescriptor `thrift:"columns,2" json:"columns"`
	Attributes map[string][]byte          `thrift:"attributes,3" json:"attributes"`
	Durability *TDurability               `thrift:"durability,4" json:"durability"`
}

func NewTTableDescriptor() *TTableDescriptor {
	return &TTableDescriptor{}
}

var TTableDescriptor_TableName_DEFAULT *TTableName

func (p *TTableDescriptor) GetTableName() *TTableName {
	if !p.IsSetTableName() {
		return TTableDescriptor_TableName_DEFAULT
	}
	return p.TableName
}

var TTableDescriptor_Columns_DEFAULT []*TColumnFamilyDescriptor

func (p *TTableDescriptor) GetColumns() []*TColumnFamilyDescriptor {
	return p.Columns
}

var TTableDescriptor_Attributes_DEFAULT map[string][]byte

func (p *TTableDescriptor) GetAttributes() map[string][]byte {
	return p.Attributes
}

var TTableDescriptor_Durability_DEFAULT TDurability

func (p *TTableDescriptor) GetDurability() TDurability {
	if !p.IsSetDurability() {
		return TTableDescriptor_Durability_DEFAULT
	}
	return *p.Durability
}
func (p *TTableDescriptor) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TTableDescriptor) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TTableDescriptor) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TTableDescriptor) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *TTableDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TTableDescriptor) ReadField1(iprot thrift.TProtocol) error {
	p.TableName = &TTableName{}
	if err := p.TableName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TableName, err)
	}
	return nil
}

func (p *TTableDescriptor) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TColumnFamilyDescriptor, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &TColumnFamilyDescriptor{}
		if err := _elem27.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem27, err)
		}
		p.Columns = append(p.Columns, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TTableDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]byte, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key28 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key28 = v
		}
		var _val29 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val29 = v
		}
		p.Attributes[_key28] = _val29
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TTableDescriptor) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := TDurability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *TTableDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTableDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TTableDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := p.TableName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TableName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *TTableDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
		}
	}
	return err
}

func (p *TTableDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteBinary(v); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TTableDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:durability: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return fmt.Errorf("%T.durability (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:durability: %s", p, err)
		}
	}
	return err
}

func (p *TTableDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableDescriptor(%+v)", *p)
}

type TNamespaceDescriptor struct {
	Name          string            `thrift:"name,1,required" json:"name"`
	Configuration map[string]string `thrift:"configuration,2" json:"configuration"`
}

func NewTNamespaceDescriptor() *TNamespaceDescriptor {
	return &TNamespaceDescriptor{}
}

func (p *TNamespaceDescriptor) GetName() string {
	return p.Name
}

var TNamespaceDescriptor_Configuration_DEFAULT map[string]string

func (p *TNamespaceDescriptor) GetConfiguration() map[string]string {
	return p.Configuration
}
func (p *TNamespaceDescriptor) IsSetConfiguration() bool {
	return p.Configuration != nil
}

func (p *TNamespaceDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TNamespaceDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TNamespaceDescriptor) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Configuration = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val31 = v
		}
		p.Configuration[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TNamespaceDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TNamespaceDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TNamespaceDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *TNamespaceDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfiguration() {
		if err := oprot.WriteFieldBegin("configuration", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:configuration: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Configuration)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Configuration {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:configuration: %s", p, err)
		}
	}
	return err
}

func (p *TNamespaceDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNamespaceDescriptor(%+v)", *p)
}

type TLogQueryFilter struct {
	RegionName       *string           `thrift:"regionName,1" json:"regionName"`
	ClientAddress    *string           `thrift:"clientAddress,2" json:"clientAddress"`
	TableName        *string           `thrift:"tableName,3" json:"tableName"`
	UserName         *string           `thrift:"userName,4" json:"userName"`
	Limit            int32             `thrift:"limit,5" json:"limit"`
	LogType          TLogType          `thrift:"logType,6" json:"logType"`
	FilterByOperator TFilterByOperator `thrift:"filterByOperator,7" json:"filterByOperator"`
}

func NewTLogQueryFilter() *TLogQueryFilter {
	return &TLogQueryFilter{
		Limit: 10,

		LogType: 1,

		FilterByOperator: 1,
	}
}

var TLogQueryFilter_RegionName_DEFAULT string

func (p *TLogQueryFilter) GetRegionName() string {
	if !p.IsSetRegionName() {
		return TLogQueryFilter_RegionName_DEFAULT
	}
	return *p.RegionName
}

var TLogQueryFilter_ClientAddress_DEFAULT string

func (p *TLogQueryFilter) GetClientAddress() string {
	if !p.IsSetClientAddress() {
		return TLogQueryFilter_ClientAddress_DEFAULT
	}
	return *p.ClientAddress
}

var TLogQueryFilter_TableName_DEFAULT string

func (p *TLogQueryFilter) GetTableName() string {
	if !p.IsSetTableName() {
		return TLogQueryFilter_TableName_DEFAULT
	}
	return *p.TableName
}

var TLogQueryFilter_UserName_DEFAULT string

func (p *TLogQueryFilter) GetUserName() string {
	if !p.IsSetUserName() {
		return TLogQueryFilter_UserName_DEFAULT
	}
	return *p.UserName
}

var TLogQueryFilter_Limit_DEFAULT int32 = 10

func (p *TLogQueryFilter) GetLimit() int32 {
	return p.Limit
}

var TLogQueryFilter_LogType_DEFAULT TLogType = 1

func (p *TLogQueryFilter) GetLogType() TLogType {
	return p.LogType
}

var TLogQueryFilter_FilterByOperator_DEFAULT TFilterByOperator = 1

func (p *TLogQueryFilter) GetFilterByOperator() TFilterByOperator {
	return p.FilterByOperator
}
func (p *TLogQueryFilter) IsSetRegionName() bool {
	return p.RegionName != nil
}

func (p *TLogQueryFilter) IsSetClientAddress() bool {
	return p.ClientAddress != nil
}

func (p *TLogQueryFilter) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TLogQueryFilter) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *TLogQueryFilter) IsSetLimit() bool {
	return p.Limit != TLogQueryFilter_Limit_DEFAULT
}

func (p *TLogQueryFilter) IsSetLogType() bool {
	return p.LogType != TLogQueryFilter_LogType_DEFAULT
}

func (p *TLogQueryFilter) IsSetFilterByOperator() bool {
	return p.FilterByOperator != TLogQueryFilter_FilterByOperator_DEFAULT
}

func (p *TLogQueryFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TLogQueryFilter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RegionName = &v
	}
	return nil
}

func (p *TLogQueryFilter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ClientAddress = &v
	}
	return nil
}

func (p *TLogQueryFilter) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *TLogQueryFilter) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *TLogQueryFilter) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *TLogQueryFilter) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := TLogType(v)
		p.LogType = temp
	}
	return nil
}

func (p *TLogQueryFilter) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := TFilterByOperator(v)
		p.FilterByOperator = temp
	}
	return nil
}

func (p *TLogQueryFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TLogQueryFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TLogQueryFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegionName() {
		if err := oprot.WriteFieldBegin("regionName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:regionName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.RegionName)); err != nil {
			return fmt.Errorf("%T.regionName (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:regionName: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientAddress() {
		if err := oprot.WriteFieldBegin("clientAddress", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:clientAddress: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ClientAddress)); err != nil {
			return fmt.Errorf("%T.clientAddress (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:clientAddress: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:tableName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return fmt.Errorf("%T.tableName (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:tableName: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err := oprot.WriteFieldBegin("userName", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:userName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.UserName)); err != nil {
			return fmt.Errorf("%T.userName (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:userName: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:limit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Limit)); err != nil {
			return fmt.Errorf("%T.limit (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:limit: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogType() {
		if err := oprot.WriteFieldBegin("logType", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:logType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.LogType)); err != nil {
			return fmt.Errorf("%T.logType (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:logType: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterByOperator() {
		if err := oprot.WriteFieldBegin("filterByOperator", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:filterByOperator: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.FilterByOperator)); err != nil {
			return fmt.Errorf("%T.filterByOperator (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:filterByOperator: %s", p, err)
		}
	}
	return err
}

func (p *TLogQueryFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLogQueryFilter(%+v)", *p)
}

type TOnlineLogRecord struct {
	StartTime           int64   `thrift:"startTime,1,required" json:"startTime"`
	ProcessingTime      int32   `thrift:"processingTime,2,required" json:"processingTime"`
	QueueTime           int32   `thrift:"queueTime,3,required" json:"queueTime"`
	ResponseSize        int64   `thrift:"responseSize,4,required" json:"responseSize"`
	ClientAddress       string  `thrift:"clientAddress,5,required" json:"clientAddress"`
	ServerClass         string  `thrift:"serverClass,6,required" json:"serverClass"`
	MethodName          string  `thrift:"methodName,7,required" json:"methodName"`
	CallDetails         string  `thrift:"callDetails,8,required" json:"callDetails"`
	Param               string  `thrift:"param,9,required" json:"param"`
	UserName            string  `thrift:"userName,10,required" json:"userName"`
	MultiGetsCount      int32   `thrift:"multiGetsCount,11,required" json:"multiGetsCount"`
	MultiMutationsCount int32   `thrift:"multiMutationsCount,12,required" json:"multiMutationsCount"`
	MultiServiceCalls   int32   `thrift:"multiServiceCalls,13,required" json:"multiServiceCalls"`
	RegionName          *string `thrift:"regionName,14" json:"regionName"`
}

func NewTOnlineLogRecord() *TOnlineLogRecord {
	return &TOnlineLogRecord{}
}

func (p *TOnlineLogRecord) GetStartTime() int64 {
	return p.StartTime
}

func (p *TOnlineLogRecord) GetProcessingTime() int32 {
	return p.ProcessingTime
}

func (p *TOnlineLogRecord) GetQueueTime() int32 {
	return p.QueueTime
}

func (p *TOnlineLogRecord) GetResponseSize() int64 {
	return p.ResponseSize
}

func (p *TOnlineLogRecord) GetClientAddress() string {
	return p.ClientAddress
}

func (p *TOnlineLogRecord) GetServerClass() string {
	return p.ServerClass
}

func (p *TOnlineLogRecord) GetMethodName() string {
	return p.MethodName
}

func (p *TOnlineLogRecord) GetCallDetails() string {
	return p.CallDetails
}

func (p *TOnlineLogRecord) GetParam() string {
	return p.Param
}

func (p *TOnlineLogRecord) GetUserName() string {
	return p.UserName
}

func (p *TOnlineLogRecord) GetMultiGetsCount() int32 {
	return p.MultiGetsCount
}

func (p *TOnlineLogRecord) GetMultiMutationsCount() int32 {
	return p.MultiMutationsCount
}

func (p *TOnlineLogRecord) GetMultiServiceCalls() int32 {
	return p.MultiServiceCalls
}

var TOnlineLogRecord_RegionName_DEFAULT string

func (p *TOnlineLogRecord) GetRegionName() string {
	if !p.IsSetRegionName() {
		return TOnlineLogRecord_RegionName_DEFAULT
	}
	return *p.RegionName
}
func (p *TOnlineLogRecord) IsSetRegionName() bool {
	return p.RegionName != nil
}

func (p *TOnlineLogRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ProcessingTime = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.QueueTime = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ResponseSize = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ClientAddress = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ServerClass = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.MethodName = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.CallDetails = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Param = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.MultiGetsCount = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.MultiMutationsCount = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.MultiServiceCalls = v
	}
	return nil
}

func (p *TOnlineLogRecord) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.RegionName = &v
	}
	return nil
}

func (p *TOnlineLogRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TOnlineLogRecord"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TOnlineLogRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:startTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return fmt.Errorf("%T.startTime (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:startTime: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("processingTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:processingTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProcessingTime)); err != nil {
		return fmt.Errorf("%T.processingTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:processingTime: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queueTime", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:queueTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.QueueTime)); err != nil {
		return fmt.Errorf("%T.queueTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:queueTime: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseSize", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:responseSize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ResponseSize)); err != nil {
		return fmt.Errorf("%T.responseSize (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:responseSize: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientAddress", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:clientAddress: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientAddress)); err != nil {
		return fmt.Errorf("%T.clientAddress (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:clientAddress: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverClass", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:serverClass: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServerClass)); err != nil {
		return fmt.Errorf("%T.serverClass (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:serverClass: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("methodName", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:methodName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MethodName)); err != nil {
		return fmt.Errorf("%T.methodName (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:methodName: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callDetails", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:callDetails: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CallDetails)); err != nil {
		return fmt.Errorf("%T.callDetails (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:callDetails: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:param: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param)); err != nil {
		return fmt.Errorf("%T.param (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:param: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:userName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.userName (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:userName: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("multiGetsCount", thrift.I32, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:multiGetsCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MultiGetsCount)); err != nil {
		return fmt.Errorf("%T.multiGetsCount (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:multiGetsCount: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("multiMutationsCount", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:multiMutationsCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MultiMutationsCount)); err != nil {
		return fmt.Errorf("%T.multiMutationsCount (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:multiMutationsCount: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("multiServiceCalls", thrift.I32, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:multiServiceCalls: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MultiServiceCalls)); err != nil {
		return fmt.Errorf("%T.multiServiceCalls (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:multiServiceCalls: %s", p, err)
	}
	return err
}

func (p *TOnlineLogRecord) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegionName() {
		if err := oprot.WriteFieldBegin("regionName", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:regionName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.RegionName)); err != nil {
			return fmt.Errorf("%T.regionName (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:regionName: %s", p, err)
		}
	}
	return err
}

func (p *TOnlineLogRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOnlineLogRecord(%+v)", *p)
}

type TIOError struct {
	Message *string `thrift:"message,1" json:"message"`
}

func NewTIOError() *TIOError {
	return &TIOError{}
}

var TIOError_Message_DEFAULT string

func (p *TIOError) GetMessage() string {
	if !p.IsSetMessage() {
		return TIOError_Message_DEFAULT
	}
	return *p.Message
}
func (p *TIOError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TIOError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIOError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TIOError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIOError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIOError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return fmt.Errorf("%T.message (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:message: %s", p, err)
		}
	}
	return err
}

func (p *TIOError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIOError(%+v)", *p)
}

func (p *TIOError) Error() string {
	return p.String()
}

type TIllegalArgument struct {
	Message *string `thrift:"message,1" json:"message"`
}

func NewTIllegalArgument() *TIllegalArgument {
	return &TIllegalArgument{}
}

var TIllegalArgument_Message_DEFAULT string

func (p *TIllegalArgument) GetMessage() string {
	if !p.IsSetMessage() {
		return TIllegalArgument_Message_DEFAULT
	}
	return *p.Message
}
func (p *TIllegalArgument) IsSetMessage() bool {
	return p.Message != nil
}

func (p *TIllegalArgument) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIllegalArgument) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *TIllegalArgument) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIllegalArgument"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TIllegalArgument) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return fmt.Errorf("%T.message (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:message: %s", p, err)
		}
	}
	return err
}

func (p *TIllegalArgument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIllegalArgument(%+v)", *p)
}

func (p *TIllegalArgument) Error() string {
	return p.String()
}
