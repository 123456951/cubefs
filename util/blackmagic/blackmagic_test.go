package blackmagic

import (
	"reflect"
	"testing"
)

type __BytesConvertTestSample struct {
	String string
	Bytes  []byte
}

var bytesConvertTestSamples = []__BytesConvertTestSample{
	{
		String: "Hello world.",
		Bytes: []byte{
			0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
		},
	},
	{
		String: "U.S. covid-19 death toll reaches 800,000 as omicron variant poses latest threat",
		Bytes: []byte{
			0x55, 0x2e, 0x53, 0x2e, 0x20, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x2d, 0x31, 0x39, 0x20, 0x64, 0x65, 0x61, 0x74,
			0x68, 0x20, 0x74, 0x6f, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x20, 0x38, 0x30, 0x30,
			0x2c, 0x30, 0x30, 0x30, 0x20, 0x61, 0x73, 0x20, 0x6f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6e, 0x20, 0x76, 0x61,
			0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
			0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74,
		},
	},
	{
		String: "Lawyers for former President Donald J. Trump have refused to comply with a congressional request " +
			"for Mr. Trumpâ€™s tax returns, saying that it is politically motivated.",
		Bytes: []byte{
			0x4c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
			0x20, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x20,
			0x4a, 0x2e, 0x20, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x72, 0x65, 0x66, 0x75,
			0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68,
			0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x72,
			0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x72, 0x2e, 0x20, 0x54, 0x72, 0x75,
			0x6d, 0x70, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x74, 0x61, 0x78, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
			0x2c, 0x20, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69,
			0x73, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6d, 0x6f, 0x74, 0x69,
			0x76, 0x61, 0x74, 0x65, 0x64, 0x2e,
		},
	},
}

func TestBytesToString(t *testing.T) {
	for _, sample := range bytesConvertTestSamples {
		if actualString := BytesToString(sample.Bytes); !reflect.DeepEqual(sample.String, actualString) {
			t.Fatalf("result mismatch\n"+
				"\tsource bytes : %v\n"+
				"\texpect string: %v\n"+
				"\tactual string: %v",
				sample.Bytes, sample.String, actualString)
		}
	}
}

func TestStringToBytes(t *testing.T) {
	for _, sample := range bytesConvertTestSamples {
		if actualBytes := StringToBytes(sample.String); !reflect.DeepEqual(sample.Bytes, actualBytes) {
			t.Fatalf("result mismatch\n"+
				"\tsource string: %v\n"+
				"\texpect bytes : %v\n"+
				"\tactual bytes : %v",
				sample.String, sample.Bytes, actualBytes)
		}
	}
}
