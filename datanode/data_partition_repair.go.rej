diff a/datanode/data_partition_repair.go b/datanode/data_partition_repair.go	(rejected hunks)
@@ -643,9 +643,9 @@ func (dp *DataPartition) streamRepairExtent(ctx context.Context, remoteExtentInf
 		}
 
 		isEmptyResponse := false
+		currRecoverySize := uint64(reply.Size)
 		// Write it to local extent file
 		if storage.IsTinyExtent(uint64(localExtentInfo.FileID)) {
-			currRecoverySize := uint64(reply.Size)
 			var remoteAvaliSize uint64
 			if reply.ArgLen == TinyExtentRepairReadResponseArgLen {
 				remoteAvaliSize = binary.BigEndian.Uint64(reply.Arg[9:TinyExtentRepairReadResponseArgLen])
@@ -655,7 +655,6 @@ func (dp *DataPartition) streamRepairExtent(ctx context.Context, remoteExtentInf
 			}
 			if isEmptyResponse {
 				currRecoverySize = binary.BigEndian.Uint64(reply.Arg[1:9])
-				reply.Size = uint32(currRecoverySize)
 			}
 			err = store.TinyExtentRecover(uint64(localExtentInfo.FileID), int64(currFixOffset), int64(currRecoverySize), reply.Data, reply.CRC, isEmptyResponse)
 			if hasRecoverySize+currRecoverySize >= remoteAvaliSize {
@@ -673,8 +672,8 @@ func (dp *DataPartition) streamRepairExtent(ctx context.Context, remoteExtentInf
 			err = errors.Trace(err, "streamRepairExtent repair data error ")
 			return
 		}
-		hasRecoverySize += uint64(reply.Size)
-		currFixOffset += uint64(reply.Size)
+		hasRecoverySize += currRecoverySize
+		currFixOffset += currRecoverySize
 		if currFixOffset >= remoteExtentInfo.Size {
 			break
 		}
